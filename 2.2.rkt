#lang racket
(define (square x) (* x x))
(define (make-segment first-point second-point)
  (cons first-point second-point))
(define (start-segment segment)
  (car segment))
(define (end-segment segment)
  (cdr segment))
(define (get-distance segment)
  (define start-segment-point (start-segment segment))
  (define end-segment-point (end-segment segment))
  (let ((xa (x-point start-segment-point))
        (ya (y-point start-segment-point))
        (xb (x-point end-segment-point))
        (yb (y-point end-segment-point))
        )
    (abs (sqrt (+ (square (- xb xa)) (square (- yb ya)))))
    )
  )

(define (make-point x y)
  (cons x y))
(define (x-point point)
  (car point))
(define (y-point point)
  (cdr point))

(define (midpoint-segment segment)
  (define start-segment-point (start-segment segment))
  (define end-segment-point (end-segment segment))
  (let ((xa (x-point start-segment-point))
        (ya (y-point start-segment-point))
        (xb (x-point end-segment-point))
        (yb (y-point end-segment-point))
        )
    (make-point (/ (+ xa xb) 2) (/ (+ ya yb) 2))
    ) 
  )
(define (print-point p)
    (newline)
    (display "(")
    (display (x-point p))
    (display ",")
    (display (y-point p))
    (display ")")
)

(define firstPoint (make-point -1 3))
(define secondPoint (make-point 6 5))
(define segment (make-segment firstPoint secondPoint))

(print-point (midpoint-segment segment))

;упражнение 2.3 на вход функции get-square передавать точки и формулу для расчета площади
;то же самое сделать с периметром, тогда для любого представления площадь и периметр будет высчитываться одной функцией